package onight.mgame.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;

public class ProtoSwiftGens {

	public static boolean isBaseType(Class<?> clazz) {
		if (clazz == String.class || clazz == Integer.class || clazz == Double.class || clazz == Short.class || clazz == Byte.class || clazz == Float.class
				|| clazz == Boolean.class || clazz == Character.class || clazz == Long.class || clazz.isPrimitive() || clazz == BigDecimal.class
				|| clazz == java.util.Date.class || clazz == java.sql.Date.class || clazz == java.sql.Timestamp.class) {
			return true;
		}
		return false;
	}

	public static String relClassName(Object type) {
		int idx = ((Class) type).getName().lastIndexOf("$");
		// if(idx<0)idx = -1;
		return ((Class) type).getName().substring(idx + 1);

	}

	public static String java2PBType(Class type) {
		if (type.equals(String.class)) {
			return "string";
		}
		if (type.equals(BigDecimal.class)||type.equals(double.class)||type.equals(Double.class)) {
			return "double";
		}
		if (type.equals(Integer.class)) {
			return "int32";
		}
		if (type.equals(Boolean.class)) {
			return "bool";
		}
		if (type.equals(boolean.class)) {
			return "bool";
		}
		if (type.equals(long.class)||type.equals(Long.class)) {
			return "int64";
		}
		if (type.equals(int.class)||type.equals(Integer.class)) {
			return "int32";
		}
		return relClassName(type);
	}

	public static void printClass(Class clazz, String name, StringBuffer sb, String tab) {
		sb.append(tab + "message " + name + "{\n");
		int i = 1;
		for (Field ff : clazz.getDeclaredFields()) {
			if (ff.getName().equals("tfw__reserved"))
				continue;
			PBFields fa = ff.getAnnotation(PBFields.class);

			if (ff.getGenericType() instanceof ParameterizedType) {
				Type type = ((ParameterizedType) ff.getGenericType()).getActualTypeArguments()[0];
				// this is a list
				printClass((Class) type, relClassName(type), sb, tab + "\t");

				sb.append( tab + "\trepeated ").append(java2PBType((Class) type) + " " + ff.getName())
				.append(" = "+(i++))
				.append(";");
				if(fa!=null)sb.append(tab+" //"+fa.name());
				sb.append("\n");
				// System.out.println("ff.name.param=" + ff.getName() + "::" +
				// type);
			} else {
				sb.append( tab + "\t").append(java2PBType(ff.getType()) + " " + ff.getName()).append(" = "+(i++)).append(";");
				if(fa!=null)sb.append(tab+" //"+fa.name());
				sb.append("\n");
				// System.out.println("ff.name=" + ff.getName() + "::" +
				// ff.getType());
			}
		}

		sb.append(tab + "}\n\n");

	}

	private static List<Class> findClasses(File directory, String packageName) throws ClassNotFoundException {
		List<Class> classes = new ArrayList<Class>();
		if (!directory.exists()) {
			return classes;
		}
		File[] files = directory.listFiles();
		for (File file : files) {
			if (file.isDirectory()) {
				assert !file.getName().contains(".");
				classes.addAll(findClasses(file, packageName + "." + file.getName()));
			} else if (file.getName().endsWith(".class")) {
				classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
			}
		}
		return classes;
	}

	private static Class[] getClasses(String packageName) throws ClassNotFoundException, IOException {
		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		assert classLoader != null;
		String path = packageName.replace('.', '/');
		Enumeration<URL> resources = classLoader.getResources(path);
		List<File> dirs = new ArrayList<File>();
		while (resources.hasMoreElements()) {
			URL resource = resources.nextElement();
			dirs.add(new File(resource.getFile()));
		}
		ArrayList<Class> classes = new ArrayList<Class>();
		for (File directory : dirs) {
			classes.addAll(findClasses(directory, packageName));
		}
		return classes.toArray(new Class[classes.size()]);
	}

	public static void main(String[] args) {
		try {
			File dstDir = new File("/Users/brew/Documents/KJ/MING/git/mgame/mfront/src/main/proto/gens");
			dstDir.mkdirs();
			for (Class clazz : getClasses("onight.mgame.autogens")) {
				// Class clazz = IF_不良资产产品查询_项目揭示_.class;
				PBInfo ano = (PBInfo) clazz.getAnnotation(PBInfo.class);
				if (ano == null)
					continue;
//				System.out.println(clazz);
				if(!clazz.getSimpleName().equals("IF_认购专区_产品列表展示"))continue;

				System.out.println("ano==" + ano.name() + ",path=" + ano.path());
				StringBuffer sb = new StringBuffer();
				sb.append("syntax = \"proto3\";\n\n");

				sb.append("package onight.zjfae.afront.gens;\n\n");
				sb.append("//Generated By BrewRobot:"+new Date()+"\n\n");

				sb.append("message " + ano.name() + "{\n\t//" + ano.path()).append("\n");

				StringBuffer sb2=new StringBuffer();
				sb2.append("message Ret_" + ano.name() + "{\n\t//" + ano.path()).append("\n");
				sb2.append("\n\t"+"string returnCode=1;	//报文头"+"\n");
				sb2.append("\n\t"+"string returnMsg=2;	//报文头"+"\n");
				sb2.append("\n\t"+ ano.name()+" data=3;"+"\n");
				
				sb2.append("\n\n}\n\n");
				
				StringBuffer sbreq = new StringBuffer();
				sbreq.append("message REQ_" + ano.name() + "{\n\t//" + ano.path()).append("\n");

				for (Class subclazz : clazz.getDeclaredClasses()) {
					
					if (subclazz.getName().contains("Request")) {
						int i=1;
						for (Field ff : subclazz.getDeclaredFields()) {
							if (ff.getName().equals("tfw__reserved"))
								continue;
							PBFields fa = ff.getAnnotation(PBFields.class);
							if (ff.getGenericType() instanceof ParameterizedType) {
								Type type = ((ParameterizedType) ff.getGenericType()).getActualTypeArguments()[0];
								sbreq.append("\n\trepeated ").append(java2PBType((Class) type) + " " + ff.getName()).append(" = "+(i++)).append(";");
								if(fa!=null)sb.append(" //"+fa.name());
								sbreq.append("\n");

							} else {
								// System.out.println("ff.name=" + ff.getName()
								// +
								// "::" + ff.getType());
								sbreq.append("\n\t").append(java2PBType(ff.getType()) + " " + ff.getName()).append(" = "+(i++)).append(";");
								if(fa!=null)sbreq.append(" //"+fa.name());
								sbreq.append("\n");

							}
						}
						sbreq.append("\n\n}");

					}
					
					if (subclazz.getName().contains("Response")) {
						for (Class subsubclazz : subclazz.getDeclaredClasses()) {
							printClass((Class) subsubclazz, relClassName(subsubclazz), sb, "\t");
						}
						int i=1;
						for (Field ff : subclazz.getDeclaredFields()) {
							if (ff.getName().equals("tfw__reserved"))
								continue;
							PBFields fa = ff.getAnnotation(PBFields.class);
							if (ff.getGenericType() instanceof ParameterizedType) {
								Type type = ((ParameterizedType) ff.getGenericType()).getActualTypeArguments()[0];
								// System.out.println("ff.name.param=" +
								// ff.getName() + "::" + type);
								// printClass((Class) type, sb);
								
								sb.append("\n\trepeated ").append(java2PBType((Class) type) + " " + ff.getName()).append(" = "+(i++)).append(";");
								if(fa!=null)sb.append(" //"+fa.name());
								sb.append("\n");

							} else {
								// System.out.println("ff.name=" + ff.getName()
								// +
								// "::" + ff.getType());
								sb.append("\n\t").append(java2PBType(ff.getType()) + " " + ff.getName()).append(" = "+(i++)).append(";");
								if(fa!=null)sb.append(" //"+fa.name());
								sb.append("\n");

							}
						}
					}
				}

				sb.append("\n\n}\n\n");
//				System.out.println(sb.toString());
				FileOutputStream fout=new FileOutputStream(new File(dstDir,ano.name()+".proto"));
				fout.write(sb.toString().getBytes("UTF-8"));
				fout.write(sb2.toString().getBytes("UTF-8"));
				fout.write(sbreq.toString().getBytes("UTF-8"));
				fout.close();
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
